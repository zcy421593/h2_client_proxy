{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"s_listen_f",
				"s_listen_file	struct ep_file *"
			],
			[
				"client",
				"client_handle_fd(int fd)	void"
			],
			[
				"s_lis",
				"s_listen_file	struct ep_file*"
			],
			[
				"s_listen",
				"s_listen_fd	int"
			],
			[
				"DOWNSTREAM_",
				"DOWNSTREAM_EVENT_NEW	enum <anonymous>"
			],
			[
				"list",
				"list_events	list_head"
			],
			[
				"sli",
				"s_list_downstreams	list_head"
			],
			[
				"LIST",
				"LIST_HEAD_INIT(name)	macro"
			],
			[
				"is",
				"is_response_complete	bool"
			],
			[
				"DOWNSTREAM",
				"DOWNSTREAM_EVENT_NEW	enum <anonymous>"
			],
			[
				"EP_BUF",
				"EP_BUF_WRITE	enum <anonymous>"
			],
			[
				"EP_BU",
				"EP_BUF_READ	enum <anonymous>"
			],
			[
				"add",
				"addr_len	socklen_t"
			],
			[
				"socka",
				"sockaddr_in	struct"
			],
			[
				"ep_timer_is",
				"ep_timer_pending(struct ep_timer *timer)	bool"
			],
			[
				"RELAY_ERR",
				"RELAY_ERR_DNS_FAILED	enum <anonymous>"
			],
			[
				"ep_buf_fr",
				"ep_buf_free(struct ep_buf *buf)	void"
			],
			[
				"buf",
				"buf_impl	struct ep_buf_impl*"
			],
			[
				"header_get_ho",
				"header_get_host(struct header *header, char *host, int len)	void"
			],
			[
				"UF_P",
				"UF_PORT	http_parser_url_fields"
			],
			[
				"http_parser_",
				"http_parser_url	struct"
			],
			[
				"ep_write",
				"ep_write_buf_free(struct ep_write_buf *buf)	void"
			],
			[
				"l",
				"len_total	int"
			],
			[
				"pending",
				"pending_response_body	char *"
			],
			[
				"RELAY_STATUS",
				"RELAY_STATUS_CONNECTED	enum <anonymous>"
			],
			[
				"relay_ge",
				"relay_get_status	relay_get_status_ptr"
			],
			[
				"li",
				"list	list_head"
			],
			[
				"RELAY_CO",
				"RELAY_CONN_ERROR	enum <anonymous>"
			],
			[
				"CONN",
				"CONN_ERROR	enum <anonymous>"
			],
			[
				"req",
				"request_header	struct header *"
			],
			[
				"pen",
				"pending_write	int"
			],
			[
				"se",
				"session	nghttp2_session *"
			],
			[
				"s",
				"stream_id	int"
			],
			[
				"NGHTTP2_WI",
				"NGHTTP2_INITIAL_WINDOW_SIZE	macro"
			],
			[
				"nghttp2_session_get_",
				"nghttp2_session_get_effective_local_window_size(nghttp2_session *session)	int32_t"
			],
			[
				"nghttp2_option",
				"nghttp2_option_set_no_auto_window_update(nghttp2_option *option, int val)	void"
			],
			[
				"nghttp2_option_set",
				"nghttp2_option_set_peer_max_concurrent_streams(nghttp2_option *option, uint32_t val)	void"
			],
			[
				"nghttp2_session_get_e",
				"nghttp2_session_get_effective_recv_data_length(nghttp2_session *session)	int32_t"
			],
			[
				"NGHTTP2_MAX",
				"NGHTTP2_MAX_WINDOW_SIZE	macro"
			],
			[
				"nghttp2_session_getw",
				"nghttp2_session_get_stream_effective_local_window_size(nghttp2_session *session, int32_t stream_id)	int32_t"
			],
			[
				"nghttp2_session_get_stream_effective_",
				"nghttp2_session_get_stream_effective_recv_data_length(nghttp2_session *session, int32_t stream_id)	int32_t"
			],
			[
				"stre",
				"stream_id	int32_t"
			],
			[
				"nghttp2_session_get",
				"nghttp2_session_get_stream_effective_local_window_size(nghttp2_session *session, int32_t stream_id)	int32_t"
			],
			[
				"NGHTTP2_",
				"NGHTTP2_FLAG_NONE	nghttp2_flag"
			],
			[
				"nghttp2_window",
				"nghttp2_option_set_no_auto_window_update(nghttp2_option *option, int val)	void"
			],
			[
				"nghttp2_get_stream_rem",
				"nghttp2_session_get_stream_remote_window_size(nghttp2_session *session, int32_t stream_id)	int32_t"
			],
			[
				"re",
				"relay_sys	struct relay_sys *"
			],
			[
				"relay_session_on",
				"relay_session_data_source_read_length_callback(nghttp2_session *session, uint8_t frame_type, int32_t stream_id, int32_t session_remote_window_size, int32_t stream_remote_window_size, uint32_t remote_max_frame_size, void *user_data)	ssize_t"
			],
			[
				"nghttp2_session_callbacks_set_on_da",
				"nghttp2_session_callbacks_set_data_source_read_length_callback(nghttp2_session_callbacks *cbs, nghttp2_data_source_read_length_callback data_source_read_length_callback)	void"
			],
			[
				"NGHTTP2_FLAG",
				"NGHTTP2_DATA_FLAG_EOF	nghttp2_data_flag"
			],
			[
				"len",
				"len_total	int"
			],
			[
				"list_for",
				"list_for_each_entry_safe(pos, n, head, member)	macro"
			],
			[
				"reque",
				"request_body_len	int"
			],
			[
				"nghttp2_data",
				"nghttp2_data_provider	typedef"
			],
			[
				"nghttp2_session_get_stream",
				"nghttp2_session_get_stream_remote_window_size(nghttp2_session *session, int32_t stream_id)	int32_t"
			],
			[
				"client_w",
				"client_write(struct client *client, char *data, int len)	int"
			],
			[
				"ep_file_get_",
				"ep_file_get_timeout(struct ep_file *ep)	int"
			],
			[
				"t",
				"timeout	int"
			],
			[
				"len_",
				"len_total	int"
			],
			[
				"list_for_eache",
				"list_for_each_entry_safe(pos, n, head, member)	macro"
			],
			[
				"pe",
				"pending_write	int"
			],
			[
				"pend",
				"pending_request_header	struct header *"
			],
			[
				"stream",
				"streamid"
			],
			[
				"nghttp2_session_set",
				"nghttp2_session_set_stream_user_data(nghttp2_session *session, int32_t stream_id, void *stream_user_data)	int"
			],
			[
				"ep_pool",
				"ep_poll_del(struct ep_poll *pool, int fd)	int"
			],
			[
				"pro",
				"proxy_connection	const char*"
			],
			[
				"HEADER",
				"HEADER_REQUEST	enum <anonymous>"
			],
			[
				"UF_",
				"UF_QUERY	http_parser_url_fields"
			],
			[
				"NGHTTP2_HCAT_",
				"NGHTTP2_HCAT_RESPONSE	nghttp2_headers_category"
			],
			[
				"bo",
				"body_len	int"
			],
			[
				"RELAY_",
				"RELAY_HEADER_COMPLETE	enum <anonymous>"
			],
			[
				"fi",
				"field_data	struct <anonymous> [7]"
			],
			[
				"f",
				"field_data	struct <anonymous> [7]"
			],
			[
				"http_parse_u",
				"http_parser_parse_url_(const char *buf, size_t buflen, int is_connect, struct http_parser_url *u)	int"
			],
			[
				"NGHTTP2_FLAG_END",
				"NGHTTP2_FLAG_END_HEADERS	nghttp2_flag"
			],
			[
				"s_con",
				"s_conn_proto	struct conn_proto*"
			],
			[
				"s_conn",
				"s_conn_tunnel	struct conn *"
			],
			[
				"nghttp2_session_mem",
				"nghttp2_session_mem_recv(nghttp2_session *session, const uint8_t *in, size_t inlen)	ssize_t"
			],
			[
				"uint",
				"uint8_t	typedef"
			],
			[
				"na",
				"namelen	size_t"
			],
			[
				"valu",
				"valuelen	size_t"
			],
			[
				"n",
				"namelen	size_t"
			],
			[
				"nghttp2_submit_re",
				"nghttp2_submit_request(nghttp2_session *session, const nghttp2_priority_spec *pri_spec, const nghttp2_nv *nva, size_t nvlen, const nghttp2_data_provider *data_prd, void *stream_user_data)	int32_t"
			],
			[
				"nghttp2_s",
				"nghttp2_session	typedef"
			],
			[
				"ses",
				"session_data	http2_session_data *"
			],
			[
				"app",
				"app_ctx	app_context *"
			],
			[
				"ep_file_n",
				"ep_file_create(struct ep_base *pool, int fd, ep_filecb cb, void *args)	struct ep_file *"
			],
			[
				"sin",
				"sin_addr	struct in_addr"
			],
			[
				"s_c",
				"s_channel	int[]"
			],
			[
				"s_ch",
				"s_channel_file	struct ep_file *"
			],
			[
				"ep_file",
				"ep_file_free(struct ep_file *ep)	void"
			],
			[
				"dns_",
				"dns_fini()	int"
			],
			[
				"ep_base",
				"ep_base_stop(struct ep_base *base)	void"
			],
			[
				"dns",
				"dns_fini()	int"
			],
			[
				"s_",
				"s_event	struct ep_file *"
			],
			[
				"s_file",
				"s_channel_file	struct ep_file *"
			],
			[
				"con",
				"connected	bool"
			],
			[
				"co",
				"conn	struct conn *"
			],
			[
				"p",
				"conn_proto	struct conn_proto *"
			],
			[
				"h",
				"response_header	struct header *"
			],
			[
				"RELAY",
				"RELAY_MSG_COMPLETE	enum <anonymous>"
			],
			[
				"list_for_each",
				"list_for_each_entry(pos, head, member)	macro"
			],
			[
				"relay",
				"relay	void *"
			],
			[
				"relay_get",
				"relay_get_header	relay_get_header_ptr"
			],
			[
				"conn",
				"conn_proto	struct conn_proto *"
			],
			[
				"c",
				"cb	relay_eventcb"
			],
			[
				"la",
				"last_field	char *"
			],
			[
				"rel",
				"relay_sys	struct relay_sys *"
			],
			[
				"client_",
				"client_handle_fd(int fd)	void"
			],
			[
				"dns_re",
				"dns_resolve(const char *host, dnscb cb, void *args)	struct dns_req *"
			],
			[
				"tcp",
				"tcp_relay_sys_init(struct ep_base *base)	int"
			],
			[
				"CONN_",
				"CONN_READ	enum <anonymous>"
			],
			[
				"si",
				"sin_family	sa_family_t"
			],
			[
				"socket",
				"socket(int __family, int __type, int __protocol)	int"
			],
			[
				"send",
				"send(int, const void *__buff, size_t __len, int __flags)	ssize_t"
			],
			[
				"list_foreach",
				"list_for_each_entry(pos, head, member)	macro"
			],
			[
				"header_set",
				"header_set_url(struct header *header, const char *url, int len)	void"
			],
			[
				"header_a",
				"header_append_complete(struct header *header)	void"
			],
			[
				"header_append_",
				"header_append_field(struct header *header, const char *field, int len)	void"
			],
			[
				"allo",
				"alloc_len	const int"
			],
			[
				"all",
				"alloc_len	const int"
			],
			[
				"recv",
				"recv(int, void *__buff, size_t __len, int __flags)	ssize_t"
			],
			[
				"ep_fil",
				"ep_file	struct"
			],
			[
				"ep_timer_info",
				"ep_timer_info_del(struct ep_timer_info *info)	void"
			],
			[
				"ep_timer",
				"ep_timer_del(struct ep_timer *timer)	int"
			],
			[
				"ti",
				"timer	struct ep_timer *"
			],
			[
				"dns_real",
				"dns_real_req	struct"
			],
			[
				"dns_real_req",
				"dns_real_req_find(const char *host)	struct dns_real_req *"
			]
		]
	},
	"buffers":
	[
		{
			"file": "relay_http2.c",
			"settings":
			{
				"buffer_size": 20712,
				"line_ending": "Windows"
			}
		},
		{
			"file": "server.c",
			"settings":
			{
				"buffer_size": 1488,
				"line_ending": "Windows"
			}
		},
		{
			"file": "ep.h",
			"settings":
			{
				"buffer_size": 1042,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 84 files for \"http_upsteam\"\n\nF:\\epoll_server\\epoll_server:\n    <binary>\n\nF:\\epoll_server\\http_downstream.c:\n  220  }\n  221  \n  222: struct upsream_sys http_upsteam = {\n  223    .init = http_downstream_init,\n  224    .setargs = http_downstream_setargs,\n\nF:\\epoll_server\\server.c:\n   14  \n   15  \n   16: extern struct upsream_sys http_upsteam;\n   17  \n   18  static int s_listen_fd = 0;\n   ..\n   44  int server_start() {\n   45    s_base = ep_base_create();\n   46:   http_upsteam.init(s_base, 8123, server_downstreamcb);\n   47    dns_init(s_base, \"114.114.114.114\");\n   48    server_do_dispatch(NULL);\n\n8 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 635,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "http_downstream.c",
			"settings":
			{
				"buffer_size": 6998,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 104.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/epoll_server"
	],
	"file_history":
	[
		"/F/stock_recieve_juece/Debug/Moni/3f/compute.lua",
		"/E/stock_history.txt",
		"/C/Users/Administrator/Desktop/wspx_debug.log",
		"/F/epoll_server/client.c",
		"/F/epoll_server/relay.h",
		"/F/fitness/stock_recieve_juece/Debug/Moni/3f/compute.lua",
		"/C/Users/Administrator/Downloads/mbedtls-2.1.2-apache/mbedtls-2.1.2/Makefile",
		"/F/fitness/stock_recieve_juece/Debug/Moni/cy_30_强平仓_新高低/compute.lua",
		"/C/Users/Administrator/Downloads/mbedtls-2.1.2-apache/mbedtls-2.1.2/include/mbedtls/ssl.h",
		"/C/Users/Administrator/Downloads/mbedtls-2.1.2-apache/mbedtls-2.1.2/library/Makefile",
		"/F/epoll_server/util.c",
		"/F/epoll_server/nghttp2/includes/nghttp2/nghttp2.h",
		"/F/id_rsa.pub",
		"/F/epoll_server/h2_server.c",
		"/F/高德crash文件/wspx_debug (4).log",
		"/F/高德crash文件/wspx.rm-190854-deleted--SIGSEGV(23).log",
		"/F/epoll_server/nghttp2/nghttp2_session.c",
		"/F/debug(5).log",
		"/C/Users/Administrator/Downloads/m3u8",
		"/F/epoll_server/ep.h",
		"/D/cygwin64/usr/include/sys/epoll.h",
		"/F/epoll_server/relay_http2.c",
		"/F/epoll_server/ep.c",
		"/F/epoll_server/header.c",
		"/F/epoll_server/nghttp2/nghttp2_submit.c",
		"/F/epoll_server/conn.h",
		"/F/epoll_server/ep_poll_epoll.c",
		"/F/epoll_server/conn_tcp.c",
		"/F/epoll_server/Makefile",
		"/F/epoll_server/server.c",
		"/F/epoll_server/http_parser.h",
		"/F/epoll_server/nghttp2/h2_server.c",
		"/F/epoll_server/relay_http.c",
		"/F/epoll_server/val.txt",
		"/F/epoll_server/dns.h",
		"/F/epoll_server/dns.c",
		"/F/epoll_server/util.h",
		"/F/epoll_server/header.h",
		"/F/epoll_server/client.h",
		"/D/cygwin64/usr/include/string.h",
		"/F/epoll_server/buffer.h",
		"/F/epoll_server/buffer.c",
		"/F/epoll_server/http_parser.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.0.3_release_001/jni/third_party/libp2pclient/comm/hash.h",
		"/F/sliding_average.hpp",
		"/F/epoll_server/nghttp2/Makefile",
		"/F/epoll_server/nghttp2/nghttp2_frame.c",
		"/F/epoll_server/nghttp2/Makefile.msvc",
		"/F/epoll_server/nghttp2/includes/nghttp2/nghttp2ver.h",
		"/F/epoll_server/request_parser.h",
		"/F/epoll_server/ep_poll.h",
		"/F/epoll_server/sys_network.h",
		"/F/epoll_server/list.h",
		"/F/epoll_server/epoll_server",
		"/F/skynet-master/skynet-src/skynet_main.c",
		"/F/skynet-master/examples/main.lua",
		"/F/skynet-master/lualib/skynet.lua",
		"/F/skynet-master/skynet-src/skynet_start.c",
		"/F/skynet-master/service-src/service_snlua.c",
		"/F/skynet-master/skynet-src/skynet_timer.c",
		"/F/skynet-master/skynet-src/skynet_socket.c",
		"/F/skynet-master/skynet-src/skynet_server.c",
		"/F/skynet-master/lualib-src/lua-mongo.c",
		"/F/skynet-master/skynet-src/malloc_hook.c",
		"/F/skynet-master/skynet-src/skynet_daemon.c",
		"/F/skynet-master/3rd/lua/linit.c",
		"/F/skynet-master/3rd/lua/lualib.h",
		"/F/skynet-master/skynet.sublime-project",
		"/F/skynet-master/lualib-src/lua-skynet.c",
		"/F/skynet-master/lualib-src/lua-socket.c",
		"/F/skynet-master/skynet-src/skynet_handle.c",
		"/F/skynet-master/skynet-src/skynet_harbor.c",
		"/F/skynet-master/service/launcher.lua",
		"/F/skynet-master/skynet-src/skynet.h",
		"/F/skynet-master/service-src/service_gate.c",
		"/F/skynet-master/skynet-src/socket_server.c",
		"/F/skynet-master/skynet-src/skynet_error.c",
		"/F/skynet-master/skynet-src/socket_kqueue.h",
		"/F/skynet-master/skynet-src/socket_epoll.h",
		"/F/skynet-master/3rd/lua-md5/compat-5.2.c",
		"/F/skynet-master/platform.mk",
		"/F/skynet-master/Makefile",
		"/C/Users/Administrator/Desktop/sig.c",
		"/F/skynet-master/skynet-src/skynet_monitor.c",
		"/F/skynet-master/skynet-src/skynet_module.c",
		"/F/skynet-master/skynet-src/skynet_module.h",
		"/F/skynet-master/skynet-src/skynet_mq.c",
		"/F/skynet-master/.tags",
		"/F/skynet-master/skynet-src/skynet_imp.h",
		"/F/mobile/rd/wspx/tags/libwspx_3.4.0_release_002/jni/third_party/libevent/test/regress_et.c",
		"/F/mobile/rd/wspx/tags/libwspx_3.4.0_release_002/ios/README",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/test/regress_et.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/test/test.cc",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libmtun/p2sp/p2sp_bitmap.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libmtun/p2sp/p2sp.cc",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libmtun/p2sp/p2sp_subsys.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libwsld/packer.c",
		"/C/Users/Administrator/Desktop/nohup.out",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/test/regress_ssl.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/evdns.3",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/evbuffer.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/epoll.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libevent/test/test-eof",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libhook/android/include/binder/MemoryDealer.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libwebp/src/webp/mux_types.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libmtun/Makefile",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/third_party/libevent/test/test-eof",
		"/F/mobile/rd/wspx/trunk/refactoring_tool/Transforms.cpp",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/third_party/libhttp-parser/http_parser.c",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libmtun/http_util.cc",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/third_party/libevent/evdns.3",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/third_party/libevent/evbuffer.c",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/third_party/libevent/epoll.c",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libhook/android/include/binder/MemoryDealer.h",
		"/F/mobile/rd/wspx/trunk/bin2c/Makefile",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/test/test.cc",
		"/F/mobile/rd/wspx/tags/libwspx_4.1.0_release_002/jni/third_party/libpt/ctcp_utils.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/libmtun/util/mdns.cc",
		"/F/mobile/rd/wspx/trunk/libwspx/ios/libmtun/libmtun/libMtun.m",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/ustl/ualgorithm",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libp2pclient/p2pframework/udp_base.h",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libp2pclient/p2pframework/udp_base.c",
		"/F/mobile/rd/wspx/tags/libwspx_4.2.0_release_002/jni/third_party/libp2pclient/udp.cc",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libmtun/wspx_settings.h",
		"/F/mobile/rd/wspx/trunk/libwspx/protobuf/config.proto",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libmtun/http_request_parser.cc",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libmtun/p2sp/p2sp_subsys_file.cc",
		"/F/mobile/rd/wspx/trunk/libwspx/jni/libmtun/http_response_parser.cc"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"F:\\epoll_server",
			"F:\\epoll_server\\nghttp2",
			"F:\\epoll_server",
			"F:\\epoll_server\\nghttp2",
			"F:\\epoll_server",
			"F:\\epoll_server\\nghttp2",
			"F:\\epoll_server",
			"F:\\skynet-master",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\jni",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"client_handle_fd",
			"http_upsteam",
			"relay_sys_init",
			"h2_server_run",
			"client_handle_fd",
			"relay_tunnel_eventcb",
			"http2_relay_sys",
			"http_relay_sys",
			"server_create_listen_fd",
			"formatString",
			"url",
			"proto",
			"jsimd",
			"client_",
			"http_upstream_eventcb",
			"h",
			"upstream",
			"typedef",
			"write_body",
			";",
			"relay_status",
			"relay_get_status",
			"relay_sys = ",
			"relay_sys",
			"tmr_connected",
			"relay = NULL",
			"relay_free",
			"client_drop",
			"sizeof",
			"is_free_pending",
			"ep_buf_file_readcb",
			"ep_buf_free",
			"is_cbclose_pending",
			"ep_buf_file_readcb",
			"relay_create",
			"192",
			"114",
			"list_request_body_buffer",
			"pending_response_body",
			"list_request_body_buffer",
			"conn_proto",
			"client->relay_sys =",
			"client->relay_sys",
			"http2_relay_sys",
			"relay_check_length_info",
			"503",
			"relay_free",
			"set_stream_user_data",
			"relay_session_data_source_read_length_callback",
			"client_handle_relay_connected",
			"relay_get_header",
			"relay_close",
			"client_drop",
			"client_write_buffer",
			"client_drop",
			"list_del",
			"relay_free",
			"is_attached",
			"relay_get_header",
			"s_conn_tunnel",
			"relay_init_h2_session",
			"s_session",
			"relay_on_message_complete",
			"relay_free",
			":443",
			"  \n",
			"relay_check_length_info",
			"relay_on_message_complete",
			"CONNECT",
			"NGHTTP2_HTTP_FLAG_METH_CONNECT",
			"on_header_callback",
			"percent_decode",
			"client_drop",
			"relay_close",
			"relay_free",
			"relay_on_message_complete",
			"relay_close",
			"relay_free",
			"{\n",
			");\n",
			"pending_write",
			"len_pending_response_body",
			"client_write",
			";\n",
			"relay_get_body",
			"submit_window",
			"nghttp2_session_resume_data",
			"NGHTTP2_ERR_NOMEM",
			"nghttp2_session_resume_data",
			"window_up",
			"WINDOW UPDATE",
			"REMOTE=",
			"WINDOW",
			"window",
			"stream_remote_window_size",
			"remote_window",
			"body sent",
			"window",
			"WINDOW UPDATE",
			"is_request_complete",
			"relay_session_data_source_read_length_callback",
			"is_request_complete",
			"relay_complete_request",
			"list_write_buf",
			"relay_session_data_source_read_length_callback",
			"list_write_buffer",
			"pending_body",
			"window",
			"nghttp2_data_source_read_length_callback",
			"window",
			";\n",
			"relay_connected",
			"ep_file_detect",
			"req_provider",
			"in_final",
			"schma",
			"post",
			"body_data",
			"  \n",
			"00011625",
			"nghttp2_session_get_stream_remote_window_size",
			"window",
			"send",
			"client_drop",
			"conn_create",
			"tcp_conn_create",
			"find source detect, backup_ips",
			"resolve_host_callback:"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"http_downstream_",
			"downstream",
			"static",
			" = NULL,",
			"list_response_write_buffer",
			"pending_response_body",
			"http2_relay_sys",
			"relay->response_header",
			"relay_url_complete",
			"relay_header_fieldcb",
			"relay_header_valuecb",
			"relay_headers_completecb",
			"relay_bodycb",
			"relay_message_completecb",
			"tcp_",
			"",
			"client_",
			"client",
			"send_buf",
			"dns_real_req_add",
			".o",
			"EP_WRITE",
			"EP_READ",
			"list_head",
			"ep_poll",
			"ep_file"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "relay_http2.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20712,
						"regions":
						{
						},
						"selection":
						[
							[
								20294,
								20308
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10853.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1488,
						"regions":
						{
						},
						"selection":
						[
							[
								1181,
								1181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ep.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1042,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								96
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 635,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										161,
										173
									],
									[
										338,
										350
									],
									[
										474,
										486
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "http_downstream.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6998,
						"regions":
						{
						},
						"selection":
						[
							[
								1902,
								1902
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 3311.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 118.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "epoll_server.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ser",
				"server.c"
			],
			[
				"http_do",
				"http_downstream.c"
			],
			[
				"downs",
				"downstream.h"
			],
			[
				"ep.h",
				"ep.h"
			],
			[
				"down",
				"downstream.h"
			],
			[
				"ep_buf_t",
				"ep_buf_tcp.c"
			],
			[
				"relay",
				"relay_http.c"
			],
			[
				"cli",
				"client.c"
			],
			[
				"http2",
				"relay_http2.c"
			],
			[
				"client",
				"client.c"
			],
			[
				"e",
				"ep.c"
			],
			[
				"v",
				"val.txt"
			],
			[
				"va",
				"val.txt"
			],
			[
				"ma",
				"Makefile"
			],
			[
				"dns.h",
				"dns.h"
			],
			[
				"nghttp2_fr",
				"nghttp2\\nghttp2_frame.c"
			],
			[
				"skynet_sock",
				"skynet-src\\skynet_socket.c"
			],
			[
				"skynet.lua",
				"lualib\\skynet.lua"
			],
			[
				"main.lua",
				"examples\\main.lua"
			],
			[
				"redsock",
				"jni\\libmtun\\redsocks.c"
			],
			[
				"redsoc",
				"libmtun\\redsocks.c"
			],
			[
				"test.cc",
				"test\\test.cc"
			],
			[
				"p2sp_file",
				"libmtun\\p2sp\\p2sp_file_cache.cc"
			],
			[
				"response",
				"libmtun\\http_response_parser.cc"
			],
			[
				"evdns.c",
				"third_party\\libevent\\evdns.c"
			],
			[
				"mdns.cc",
				"libmtun\\util\\mdns.cc"
			],
			[
				"mtunne",
				"libmtun\\mtunnel.c"
			],
			[
				"http_reque",
				"libwspx\\jni\\libmtun\\http_request_parser.cc"
			],
			[
				"http_par",
				"libwspx\\jni\\third_party\\libhttp-parser\\http_parser.c"
			],
			[
				"mdns",
				"jni\\libmtun\\util\\mdns.cc"
			],
			[
				"udp_ba",
				"jni\\third_party\\libp2pclient\\p2pframework\\udp_base.c"
			],
			[
				"http",
				"libwspx\\jni\\libmtun\\http_util.cc"
			],
			[
				"cutil",
				"jni\\libmtun\\util\\cutil.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 252.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
